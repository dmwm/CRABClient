#!/usr/bin/env python

""" This utility is used to prepare everything CRAB3 needs from the CMSSW environment.
    The purpose of this script is to allow to run CRAB3 in a pure COMP environment
    after running 'scram unset env'

    In particular the script:
        - saves the environment variables used by CRAB3: SCRAM_ARCH, CMSSW_BASE, CMSSW_RELEASE_BASE, CMSSW_VERSION, LOCALRT
        - handles the PSet file:
            * get the output files (tfiles and edmfiles)
            * dump the pickled expanded version of the pset
"""
#TODO check what happens if I run this script when 'CRAB3_BOOTSTRAP_DIR' is set
import os
import sys
import json
import tempfile
import traceback
from optparse import OptionParser

from ServerUtilities import FEEDBACKMAIL

from CRABClient.CRABOptParser import CRABOptParser
from CRABClient.CRABOptParser import CRABCmdOptParser
from CRABClient.JobType.CMSSWConfig import CMSSWConfig
from CRABClient.JobType.ScramEnvironment import ScramEnvironment
from CRABClient.ClientExceptions import ClientException, ConfigurationException
from CRABClient.ClientUtilities import BOOTSTRAP_ENVFILE, BOOTSTRAP_INFOFILE, BOOTSTRAP_CFGFILE, LOGLEVEL_MUTE
from CRABClient.ClientUtilities import setSubmitParserOptions, validateSubmitOptions, initLoggers, setConsoleLogLevelVar, flushMemoryLogger

from WMCore.Configuration import loadConfigurationFile


def saveScramEnv(destFile, logger):
    """ Copy the environment variables used by CRAB3 into a json dict, and dump it into 'destFile'
t
    """
    try:
        c3env = ScramEnvironment(logger)
        with open(destFile, 'w') as fd:
            json.dump(c3env, fd)
    except IOError as ioe:
        raise ClientException("Cannot save file %s: %s" %  (destFile, ioe))


def saveCfgFile(destFile, cmsswCfg):
    """ Save the pset file pickled and expanded version into 'destFile'
    """
    try:
        cmsswCfg.writeFile(destFile)
    except IOError as ioe:
        raise ClientException("Cannot save file %s: %s" %  (destFile, ioe))


def saveCfgInfo(destFile, cmsswCfg):
    """ Get the output files from the pset, LHE info, and dump them into 'destFile'
    """
    try:
        info = {}
        edmfiles, tfiles = cmsswCfg.outputFiles()
        lhe, nfiles = cmsswCfg.hasLHESource()
        info['outfiles'] = [ edmfiles, tfiles]
        info['lheinfo'] = [lhe, nfiles]
        with open(destFile, 'w') as fd:
            json.dump(info, fd)
    except IOError as ioe:
        raise ClientException("Cannot save file %s: %s" %  (destFile, ioe))


def getTmpDir():
    """ Create a temporary directory for storing the information the client needs
    """
    try:
        tempName = tempfile.mkdtemp()
    except Exception as e: #I could not find any documentation about possible failures of mkdtemp. Catching Exception
        raise ClientException(("Cannot create the temporary directory to store the files created by the bootstrap script."
                               "Error: %s" % e))
    return tempName


def getConfigName(logger):
    """ Get the configuration filename from the command line options
    """
    ## The client has a "two level" parsing. One global (for example gets the --debug option and the command name),
    ## and one specialized that depends on the command.
    parser = CRABOptParser()
    optParser = CRABCmdOptParser("submit", "", True)
    setSubmitParserOptions(optParser)

    opt, args =  parser.parse_args()
    args = args or []
    opt, cmdargs = optParser.parse_args(args[1:])
    validateSubmitOptions(opt, args, logger)

    return opt.config


def getConfig(cfgName):
    """ Load the CRAB3 configuration file and get the pset filename
    """
    if not os.path.isfile(cfgName):
        raise ConfigurationException("CRAB configuration file %s not found." % (cfgName))
    try:
        config = loadConfigurationFile(os.path.abspath(cfgName))
    except RuntimeError as re:
        raise ConfigurationException(("CRAB configuration syntax error: %s"
                                      "Please refer to https://twiki.cern.ch/twiki/bin/view/CMSPublic/CRAB3CommonErrors#Syntax_error_in_CRAB_configurati" % re ))
    if getattr(getattr(config, 'JobType', None), 'psetName', None) == None:
        raise ConfigurationException(("Invalid CRAB configuration %s.\nParameter JobType.psetName not specified..\n"
                                      "Please, make sure this parameter exists in you CRAB configuration." % (cfgName)))

    return config


if __name__ == '__main__':
    try:
        setConsoleLogLevelVar(LOGLEVEL_MUTE)
        tblogger, logger, memhandler = None, None, None
        tblogger, logger, memhandler = initLoggers()
        cfgName = getConfigName(logger)
        config = getConfig(cfgName)
        cmsswCfg = CMSSWConfig(config=config, userConfig=config.JobType.psetName, logger=logger)
        valid, msg = cmsswCfg.validateConfig()
        if not valid:
            raise ConfigurationException(msg) #That's a ClientException as well
        tmpdir = getTmpDir()
        saveScramEnv( os.path.join(tmpdir, BOOTSTRAP_ENVFILE), logger)
        saveCfgFile( os.path.join(tmpdir, BOOTSTRAP_CFGFILE), cmsswCfg)
        saveCfgInfo( os.path.join(tmpdir, BOOTSTRAP_INFOFILE), cmsswCfg)
    except ClientException as ce:
        print("Error during CRAB3 bootstrap:\n%s" % str(ce))
        sys.exit(1)
    except Exception as e:
        print("")
        print("Unknown error during CRAB3 bootstrap.\n%s" % e)
        print("Please, copy&paste the stacktrace above to the %s list if you need help from Physics Support." % FEEDBACKMAIL)
        print("")
        traceback.print_exc()
        sys.exit(2)
    finally:
        if tblogger and memhandler and logger:
            flushMemoryLogger(tblogger, memhandler, "crab3bootstrap.log")

    print(tmpdir)
