#!/usr/bin/env python
"""
This contains the hooks to call the different command plug-ins.
It is not intended to contain any of the CRAB-3 client logic,
it simply:
  - intercepts the CLI options and command
  - loads and calls the specified command
  - exit with the proper exit codes
"""
import sys
if sys.version_info < (2, 6):
    print '\nError: using a version of python < 2.6. Exiting...\n'
    sys.exit()

import json
import logging
import logging.handlers
import os

from httplib import HTTPException
from optparse import OptionParser, OptionGroup
from socket import error as SocketError

from CRABClient import __version__ as client_version
from CRABClient.client_utilities import getAvailCommands
from CRABClient.client_exceptions import ClientException


class MyNullHandler(logging.Handler):
    """
    TODO: Python 2.7 supplies a null handler that will replace this.
    """
    def emit(self, record):
        """
        TODO: Python 2.7 supplies a null handler that will replace this.
        """
        pass


class MyParser(OptionParser):
    """
    Allows to make OptionParser behave how we prefer
    """
    def format_epilog(self, formatter):
        """
        do not strip the new lines from the epilog
        """
        return self.epilog


class CRABClient(object):
    def __init__( self ):
        """
        Get the command to run, the options to pass it and a logger instance
        at appropriate level
        """

        self.sub_commands = getAvailCommands()
        usage  = "usage: %prog [options] COMMAND [command-options] [args]"
        epilog = '\nValid commands are: \n'
        for k in sorted(self.sub_commands.keys()):
            epilog += '  %s' % self.sub_commands[k].name
            epilog += ''.join( [' (%s)' % name for name in self.sub_commands[k].shortnames ] )
            epilog += '\n'
        epilog += "To get single command help run:\n  crab command --help|-h\n"

        epilog += '\nFor more information on how to run CRAB-3 please follow this link: \n'
        epilog += ' https://twiki.cern.ch/twiki/bin/view/CMS/RunningCRAB3\n'

        self.parser = MyParser( usage   = usage,
                                epilog  = epilog,
                                version = "CRAB client v%s" % client_version
                              )

        # This is the important bit
        self.parser.disable_interspersed_args()
        self.parser.add_option( "-q", "--quiet",
                                action = "store_true",
                                dest = "quiet",
                                default = False,
                                help = "don't print any messages to stdout" )

        self.parser.add_option( "-d", "--debug",
                                action = "store_true",
                                dest = "debug",
                                default = False,
                                help = "print extra messages to stdout" )


    def __call__(self):
        (options, args) = self.parser.parse_args()

        # Set up the logger and exception handling

        # Log verbosely
        logger = logging.getLogger('CRAB3')
        logger.setLevel(logging.DEBUG)

        # Set up console output to stdout at appropriate level
        loglevel = logging.INFO
        if options.quiet:
            loglevel = logging.WARNING
        if options.debug:
            loglevel = logging.DEBUG

        console_format = '%(message)s'
        console = logging.StreamHandler(sys.stdout)
        console.setFormatter(logging.Formatter(console_format))
        console.setLevel(loglevel)
        logger.addHandler(console)

        self.logger = logger

        #Instructions needed in case of early failures: sometimes the traceback logger
        #has not been set yet. The right file handler is only added when the workarea
        #of the task is created
        tbLogger = logging.getLogger('CRAB3:traceback')
        nh = MyNullHandler()
        tbLogger.addHandler(nh)

        # Replace excepthook with logger
        def log_exception(exc_type, exc_value, tback):
            """
            Send a short version of the exception to the console,
            a long version to the log

            Adapted from Doug Hellmann
            """
            # This goes to the console
            logging.getLogger('CRAB3').error("ERROR: %s: %s" % (exc_type.__name__, exc_value))
            logging.getLogger('CRAB3').error("\n\tPlease file a new issue at https://its.cern.ch/jira/browse/CAF including last lines of crab.log.")
            logging.getLogger('CRAB3').error("\tClient Version: %s" % client_version)
            # This goes to the log file
            tbLogger = logging.getLogger('CRAB3:traceback')
            tbLogger.error("Unhandled Exception!")
            tbLogger.error(exc_value, exc_info=(exc_type, exc_value, tback))

        sys.excepthook = log_exception

        # check that the command is valid
        if len(args) == 0:
            print "You have not specified a command."
            # Described the valid commands in epilog, reuse here
            print self.parser.epilog
            sys.exit(-1)

        sub_cmd = None
        try:
            sub_cmd = next( v for k,v in self.sub_commands.items() if args[0] in v.shortnames or args[0]==v.name)
        except StopIteration:
            print "'" + str(args[0]) + "' is not a valid command."
            print self.parser.print_help()
            sys.exit(-1)
        self.cmd = sub_cmd(self.logger, args[1:])

        self.cmd()


if __name__ == "__main__":
    # Create the crab object and start it
    # Handled in a try/except to run in a controlled environment
    #  - do not want to expose known exception to the outside
    #  - exceptions thrown in the client should exit and set an approprate
    #    exit code, this is a safety net

    exitcode = 1
    client = CRABClient()
    try:
        client()
        exitcode = 0 #no exceptions no errors
    except KeyError, ke:
        # The single quotes in KeyErrors are annoying...
        logging.getLogger('CRAB3:traceback').exception('Caught exception')
        # There will be other KeyErrors, catch them here...
        client.logger.error("Error %s" % str(ke))
        exitcode = 100
    except SocketError, se:
        msg = 'Could not establish a connection with the server. '
        msg += 'This may be a temporary problem, but if you see it repeatedly please notify AnaOps'
        client.logger.error(msg)
        logging.getLogger('CRAB3:traceback').exception('Caught exception')
        exitcode = 2
    except NameError, ne:
        client.logger.error( str(ne) )
        logging.getLogger('CRAB3:traceback').exception('Caught exception')
        exitcode = 3
    except HTTPException, he:
        client.logger.info("Error contacting the server.")
        if he.headers.has_key('X-Error-Detail'):
            client.logger.info('Server answered with: %s' % he.headers['X-Error-Detail'])
        if he.headers.has_key('X-Error-Info'):
            client.logger.info('Reason is: %s' % he.headers['X-Error-Info'])
        #The following goes to the logfile.
        errmsg = "ERROR: %s (%s): " % (he.reason, he.status)
        ## answer can be a json or not
        try:
            errmsg += " '%s'" % he.result
        except ValueError:
            pass
        client.logger.debug(errmsg)
        client.logger.debug('Command failed with URI: %s' % he.url)
        client.logger.debug('     Input data: %s' % he.req_data)
        client.logger.debug('     Request headers: %s' % he.headers)
        logging.getLogger('CRAB3:traceback').exception('Caught exception')
        exitcode = he.status
    except ClientException, ce:
        client.logger.error(ce)
        logging.getLogger('CRAB3:traceback').exception('Caught exception')
        exitcode = ce.exitcode

    if hasattr(client, 'cmd'):
        client.cmd.terminate( exitcode )

    sys.exit( exitcode )
