#!/usr/bin/env python
"""
This contains the hooks to call the different command plug-ins.
It is not intended to contain any of the CRAB-3 client logic,
it simply:
  - intercepts the CLI options and command
  - loads and calls the specified command
  - exit with the proper exit codes
"""
import sys
if sys.version_info < (2, 6):
    print '\nError: using a version of python < 2.6. Exiting...\n'
    sys.exit()

import json
import logging
import logging.handlers
import os

from httplib import HTTPException
from optparse import OptionParser, OptionGroup
from socket import error as SocketError

from client_utilities import getAvailCommands


class MyNullHandler(logging.Handler):
    """
    TODO: Python 2.7 supplies a null handler that will replace this.
    """
    def emit(self, record):
        """
        TODO: Python 2.7 supplies a null handler that will replace this.
        """
        pass


class CRABClient(object):
    def __init__( self ):
        """
        Get the command to run, the options to pass it and a logger instance
        at appropriate level
        """

        self.version = '0.1'

        self.sub_commands = getAvailCommands()

        usage  = "usage: %prog [options] COMMAND [command-options] [args]"
        epilog = "Valid commands are: %s" % ", ".join(sorted(self.sub_commands.keys()))
        self.parser = OptionParser( usage   = usage,
                                    epilog  = epilog,
                                    version = "CRAB client v%s" % self.version
                                  )

        # This is the important bit
        self.parser.disable_interspersed_args()
        self.parser.add_option( "-q", "--quiet",
                                action = "store_true",
                                dest = "quiet",
                                default = False,
                                help = "don't print any messages to stdout" )

        self.parser.add_option( "-d", "--debug",
                                action = "store_true",
                                dest = "debug",
                                default = False,
                                help = "print extra messages to stdout" )

        self.parser.add_option( "--cmd-help",
                                action = "store_true",
                                dest = "cmd_help",
                                default = False,
                                help = "print help for COMMAND",
                                metavar = "COMMAND" )


    def __call__(self):
        (options, args) = self.parser.parse_args()

        # Set up the logger and exception handling

        # Log verbosely
        logger = logging.getLogger('CRAB3')
        logger.setLevel(logging.DEBUG)

        # Set up console output to stdout at appropriate level
        loglevel = logging.INFO
        if options.quiet:
            loglevel = logging.WARNING
        if options.debug:
            loglevel = logging.DEBUG

        console_format = '%(message)s'
        console = logging.StreamHandler(sys.stdout)
        console.setFormatter(logging.Formatter(console_format))
        console.setLevel(loglevel)
        logger.addHandler(console)

        tbLogger = logging.getLogger('CRAB3:traceback')
        nh = MyNullHandler()
        tbLogger.addHandler(nh)

        self.logger = logger


        # Replace excepthook with logger
        def log_exception(exc_type, exc_value, tback):
            """
            Send a short version of the exception to the console,
            a long version to the log
    
            Adapted from Doug Hellmann
            """
            # This goes to the console
            logging.getLogger('CRAB3').error("%s: %s  See logfile for more info" % (exc_type.__name__, exc_value))
            # This goes to the log file
            tbLogger = logging.getLogger('CRAB3:traceback')
            tbLogger.error("Unhandled Exception!")
            tbLogger.error("\tPlease file a bug report at https://svnweb.cern.ch/trac/CMSDMWM/newticket?component=CRABClient with the following information:")
            tbLogger.error("\tClient Version: %s" % self.version)
            tbLogger.error(exc_value, exc_info=(exc_type, exc_value, tback))

        sys.excepthook = log_exception

        # check that the command is valid
        if len(args) == 0 or args[0] not in self.sub_commands.keys():
            print "You have not specified a valid command."
            # Described the valid commands in epilog, reuse here
            print self.parser.epilog
            sys.exit(-1)

        sub_cmd = args[0]
        cmd = self.sub_commands[sub_cmd](self.logger)

        if options.cmd_help:
            # call the printHelp function for the command
            cmd.printHelp()
        else:
            # run the command
            (exitcode, message) = cmd(args[1:])
            if exitcode != 0:
                self.logger.error( message ) 


if __name__ == "__main__":
    # Create the crab object and start it
    # Handled in a try/except to run in a controlled environment
    #  - do not want to expose known exception to the outside
    #  - exceptions thrown in the client should exit and set an approprate
    #    exit code, this is a safety net

    exitcode = 1
    client = CRABClient()
    try:
        client()
        exitcode = 0
    except KeyError, ke:
        # The single quotes in KeyErrors are annoying...
        logging.getLogger('CRAB3:traceback').exception('Caught exception')
        # There will be other KeyErrors, catch them here...
        client.logger.error("Error %s" % str(ke))
        exitcode = 100
    except SocketError, se:
        msg = 'Could not establish a connection with the server.'
        msg += 'This may be a temporary problem, but if you see it repeatedly please notify AnaOps\n'
        client.logger.error(msg)
        logging.getLogger('CRAB3:traceback').exception('Caught exception')
        exitcode = 2
    except NameError, ne:
        client.logger.error( str(ne) )
        logging.getLogger('CRAB3:traceback').exception('Caught exception')
        exitcode = 3
    except HTTPException, he:
        client.logger.error((" %s (%s): %s" % (he.reason, he.status, json.loads(he.result)['message'])))
        client.logger.debug('Command failed with URI: %s' % he.url)
        client.logger.debug('     Input data: %s' % he.req_data)
        client.logger.debug('     Request headers: %s' % he.req_headers)
        logging.getLogger('CRAB3:traceback').exception('Caught exception')
        exitcode = he.status

    sys.exit( exitcode )
